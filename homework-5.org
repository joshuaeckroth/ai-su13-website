#+SETUPFILE: setup.org
#+TITLE: Homework 5

* Task 1 (30 pts)

Assume we have the following Prolog database:

#+BEGIN_SRC prolog
parent(tom, liz).
parent(tim, bob).
parent(bob, ann).
parent(bob, pat).
parent(pat, jim).

female(pam).
male(tim).
male(tom).
male(bob).
female(liz).
female(pat).
female(ann).
male(jim).

mother(X) :- parent(X, _), female(X).
#+END_SRC

1. Write Prolog queries for the following questions:

   1. Who is Ann's parent?

   2. Is Jim Bob's child?

   3. Who is Jim's grandparent?

2. Write a rule that describes a child, so that ~child(X, Y)~ means
   ~X~ is the child of ~Y~. Don't allow a person to be his or her
   own child.

4. Define an ancestor rule. An ancestor is a parent of a person, a
   grandparent, a great-grandparent, etc. Naturally, this rule is
   recursive (like the ~member~ predicate in the notes).

5. Define a descendant rule. This rule is the opposite of the ancestor
   rule. A child is a descendant; so is a grandchild, great-grandchild,
   etc.


* Task 2 (50 pts)

Copy-paste the family database from the notes and the various predicates
created to operate on that database. Now, look at the guidelines regarding
poverty at the [[http://aspe.hhs.gov/poverty/12poverty.shtml][Dept. of
Health & Human Services]] website (for the 48 states). These guidelines
define the minimum amount of income, for a given household size, to be
considered outside of poverty. Define a ~family_in_poverty(FamilyID)~
predicate that is only true when the family designated by ~FamilyID~
is in poverty according to the guidelines. Also, add some more family
data so you have examples of families in poverty.

Additionally, provide a query or define a predicate that tells you the
average household income of families in poverty.


* Task 3 (10 pts)

Do the following unify, and if so, what are values for the variables (one set of values for each question), if any variables are involved, that make the unification work?

  - ~parent(tom, liz)~ and ~parent(tom, X)~

  - ~parent(X, liz)~ and ~parent(liz, X)~

  - ~parent(X, Y)~ and ~parent(Y, X)~

  - ~head(X, [a, b, c])~ and ~head(b, [a, b, c])~

  - ~head(foo(Y), X)~ and ~head(foo(Z), [foo(w)])~

  - ~foo(bar(a, b), baz(c))~ and ~foo(bar(X), baz(Y))~

* Task 4 (10 pts)

Draw a resolution tree for ~mother(X)~. Note that there is a particular
order by which Prolog creates subgoals (that is, the order that facts/rules
are written in the knowledge base). You only need to show the tree
until the first time the predicate is proved.

* Extra credit (10 pts)

Combine some of your predicates about grandparents, ancestors, friends,
enemies, etc. into the family database. Add some predicates that
utilize this information; for example, do children in families below the
poverty level make friends or enemies with children in families above
the poverty level?

Or, instead, define more predicates/queries about families and
poverty. Which people working at OSU are in poverty? Are unemployed
people more likely to be in families that are below the poverty line?
(You can answer this by finding the length of the list of unemployed
people in families that are below the poverty line, and compare that
length (using ~Length1 > Length2~) to the length of the list of employed
people in families that are below the poverty line.)


* Extra credit (10 pts)

Look at the [[./prolog-examples.html][Prolog examples]] notes,
specifically at the second example (the maze program). Extend the program
in the following way.

  - Create another room that can only be accessed if switch 1 is toggled.

  - Put a constraint on switch 1 so that it can only be toggled in the garden.


#+INCLUDE: footer.org
